{"version":3,"sources":["components/MyWebcam.js","components/WelcomeScreen.js","components/VotingCode.js","components/EndScreen.js","components/Topnav.js","components/Botnav.js","components/TestStepper.js","App.js","reportWebVitals.js","index.js"],"names":["MyWebcam","props","videoConstraints","width","min","height","WelcomeScreen","to","Button","variant","color","VotingCode","EndScreen","Topnav","AppBar","position","Toolbar","Botnav","useStyles","makeStyles","theme","root","button","marginTop","spacing","marginRight","actionsContainer","marginBottom","resetContainer","padding","getStepContent","step","TestStepper","classes","React","useState","activeStep","setActiveStep","steps","handleNext","prevActiveStep","className","Stepper","orientation","map","label","index","Step","StepLabel","StepContent","Typography","onClick","length","Paper","square","elevation","App","Grid","container","direction","path","exact","component","CssBaseline","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.64c4464e.chunk.js","sourcesContent":["import React from 'react';\r\nimport Webcam from \"react-webcam\";\r\n\r\nfunction MyWebcam(props) {\r\n    const videoConstraints = {\r\n        width: { min: 480 },\r\n        height: { min: 720 },\r\n    };\r\n\r\n    return (\r\n        <Webcam videoConstraints={videoConstraints}\r\n                width={480}\r\n                height={720}/>\r\n    );\r\n}\r\n\r\nexport default MyWebcam;","import React from 'react';\r\nimport Button from \"@material-ui/core/Button\";\r\nimport {Link} from \"react-router-dom\";\r\n\r\nfunction WelcomeScreen(props) {\r\n    return (\r\n        <div>\r\n            <Link to=\"/votingcode\">\r\n                <Button variant=\"contained\" color=\"primary\">Wahl starten</Button>\r\n            </Link>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default WelcomeScreen;","import React from 'react';\r\nimport MyWebcam from \"./MyWebcam\";\r\nimport {Link} from \"react-router-dom\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nfunction VotingCode(props) {\r\n    return (\r\n        <div>\r\n            <MyWebcam/>\r\n            <Link to=\"/returncode\">\r\n                <Button variant=\"contained\" color=\"primary\"> Code gescannt</Button>\r\n            </Link>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default VotingCode;","import React from 'react';\r\n\r\nfunction EndScreen(props) {\r\n    return (\r\n        <div><h1>Danke fürs Abstimmen!</h1></div>\r\n    );\r\n}\r\n\r\nexport default EndScreen;","import React from 'react';\r\nimport {AppBar, Toolbar} from \"@material-ui/core\";\r\n\r\nfunction Topnav(props) {\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <h1>Wahlapp</h1>\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}\r\n\r\nexport default Topnav;","import React from 'react';\r\nimport {AppBar, MobileStepper, Toolbar} from \"@material-ui/core\";\r\n\r\nfunction Botnav(props) {\r\n    return (\r\n        <AppBar position=\"static\">\r\n            <Toolbar>\r\n                <MobileStepper\r\n                    variant=\"dots\"\r\n                    steps={6}\r\n                    position=\"static\"\r\n                />\r\n            </Toolbar>\r\n        </AppBar>\r\n    );\r\n}\r\n\r\nexport default Botnav;","import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Stepper from '@material-ui/core/Stepper';\r\nimport Step from '@material-ui/core/Step';\r\nimport StepLabel from '@material-ui/core/StepLabel';\r\nimport StepContent from '@material-ui/core/StepContent';\r\nimport Button from '@material-ui/core/Button';\r\nimport Paper from '@material-ui/core/Paper';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport WelcomeScreen from \"./WelcomeScreen\";\r\nimport VotingCode from \"./VotingCode\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        width: '100%',\r\n    },\r\n    button: {\r\n        marginTop: theme.spacing(1),\r\n        marginRight: theme.spacing(1),\r\n    },\r\n    actionsContainer: {\r\n        marginBottom: theme.spacing(2),\r\n    },\r\n    resetContainer: {\r\n        padding: theme.spacing(3),\r\n    },\r\n}));\r\n\r\nfunction getSteps() {\r\n    return ['1. Wahlapp', '2. Auswahl', '3. Wahlprozess starten', '4. Wahl', '5. Prüfcode', '6. Bestätigung', '7. Finalisierung', '8. Abschluss'];\r\n}\r\n\r\nfunction getStepContent(step) {\r\n    switch (step) {\r\n        case 0:\r\n            return <WelcomeScreen/>\r\n        case 1:\r\n            return <VotingCode/>;\r\n        case 2:\r\n            return `Try out different ad text to see what brings in the most customers,\r\n              and learn how to enhance your ads using features like ad extensions.\r\n              If you run into any problems with your ads, find out how to tell if\r\n              they're running and how to resolve approval issues.`;\r\n        default:\r\n            return 'Unknown step';\r\n    }\r\n}\r\n\r\nexport default function TestStepper() {\r\n    const classes = useStyles();\r\n    const [activeStep, setActiveStep] = React.useState(0);\r\n    const steps = getSteps();\r\n\r\n    const handleNext = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep + 1);\r\n    };\r\n\r\n    const handleBack = () => {\r\n        setActiveStep((prevActiveStep) => prevActiveStep - 1);\r\n    };\r\n\r\n    const handleReset = () => {\r\n        setActiveStep(0);\r\n    };\r\n\r\n    return (\r\n        <div className={classes.root}>\r\n            <Stepper activeStep={activeStep} orientation=\"vertical\">\r\n                {steps.map((label, index) => (\r\n                    <Step key={label}>\r\n                        <StepLabel>{label}</StepLabel>\r\n                        <StepContent>\r\n                            <Typography>{getStepContent(index)}</Typography>\r\n                            <div className={classes.actionsContainer}>\r\n                                <div>\r\n                                    {/*<Button\r\n                                        disabled={activeStep === 0}\r\n                                        onClick={handleBack}\r\n                                        className={classes.button}\r\n                                    >\r\n                                        Back\r\n                                    </Button>*/ /*no back button needed*/}\r\n                                    <Button\r\n                                        variant=\"contained\"\r\n                                        color=\"primary\"\r\n                                        onClick={handleNext}\r\n                                        className={classes.button}\r\n                                    >\r\n                                        {activeStep === steps.length - 1 ? 'Finish' : 'Next'}\r\n                                    </Button>\r\n                                </div>\r\n                            </div>\r\n                        </StepContent>\r\n                    </Step>\r\n                ))}\r\n            </Stepper>\r\n            {activeStep === steps.length && (\r\n                <Paper square elevation={0} className={classes.resetContainer}>\r\n                    <Typography>All steps completed - you&apos;re finished</Typography>\r\n                    <Button onClick={handleReset} className={classes.button}>\r\n                        Reset\r\n                    </Button>\r\n                </Paper>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n","import './App.css';\nimport \"@fontsource/roboto\";\nimport MyWebcam from \"./components/MyWebcam\";\nimport WelcomeScreen from \"./components/WelcomeScreen\";\nimport ReturnCode from \"./components/ReturnCode\";\nimport VotingCode from \"./components/VotingCode\";\nimport FinalisationCode from \"./components/FinalisationCode\";\nimport ConfirmationCode from \"./components/ConfirmationCode\";\nimport EndScreen from \"./components/EndScreen\";\nimport {BrowserRouter as Router, Route} from \"react-router-dom\";\nimport {CssBaseline, Grid} from \"@material-ui/core\";\nimport Topnav from \"./components/Topnav\";\nimport Botnav from \"./components/Botnav\";\nimport TestStepper from \"./components/TestStepper\";\n\nfunction App() {\n\n\n    return (\n        <div>\n            <Grid container direction=\"column\">\n                <Topnav className=\"Topnav\"/>\n                <div className=\"ContainerStyles\">\n                    <Router>\n                        {/*<Route path=\"/\" exact component={WelcomeScreen}/>\n                        <Route path=\"/webcam\" component={MyWebcam}/>\n                        <Route path=\"/votingcode\" component={VotingCode}/>\n                        <Route path=\"/returncode\" component={ReturnCode}/>\n                        <Route path=\"/confirmationcode\" component={ConfirmationCode}/>\n                        <Route path=\"/finalisationcode\" component={FinalisationCode}/>\n                        <Route path=\"/endscreen\" component={EndScreen}/>*/}\n                        <Route path=\"/\" exact component={TestStepper}/>\n                    </Router>\n                </div>\n                {/*<Botnav/>*/}\n            </Grid>\n            <CssBaseline/>\n\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}